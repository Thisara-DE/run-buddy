/* Before we can start styling a page using CSS, we need to remove these default browser-enforced styles. To do this, we'll apply some default CSS values for every element in the page to level the playing field all at once.  */
/* We just told every element on the page to not have any margin or border unless we explicitly tell it to. Now we don't have to concern ourselves with undoing built-in browser styles one by one. */
/* The asterisk * we used here is used quite often in programming. It is typically called a wildcard, but in CSS it is known as a universal selector. This is essentially a catch-all selector that says, "I won't match one thing—I'll match everything!" */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* apply styles to the body */
body {
  /* more on this crazy alphanumerical value in a minute! */
  color: #39a6b2;
  font-family: Arial, Helvetica, sans-serif;
}

/* apply styles to the header (other ways to apply styles to padding*/
/*  /* Applies 20px to every side (top, right, bottom, left)
 header {
    padding: 20px;
  }
 
  /* Applies 20px to the top and bottom, then 35px to the left and right
  header {
    padding: 20px 35px;
  }
 
  /* Applies 10px to the top, 15px to the right, 20px to the bottom, 25px to the left (in that specific clockwise order)
  header {
    padding: 10px 15px 20px 25px;
  } */

header {
  padding-top: 20px;
  padding-right: 35px;
  padding-bottom: 20px;
  padding-left: 35px;
  background-color: #39a6b2;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  position: -webkit-sticky;
  position: sticky; /* Note that we put the prefixed version first in the CSS, and the standardized version second. We should always put the standardized version of a property at the end of a sequence of vendor-prefixed versions. The browser will always apply the last version that it can interpret, and if we list an earlier, experimental version of the property last in the listing, then it would be used instead of the finalized version. */
  top: 0; /* The top property is important because this tells the browser where to "stick" the element. We always want the header to be at the very top of the viewport, so top: 0; makes the most sense. */
  background-image: url("../css/hero-bg.jpg");    
  background-size: cover; /* The background-size property can set the size of the background image to its original size or make it stretched, repeated, or constrained to fit the available space. */
  background-position: center; 
  background-attachment: fixed;
  background-position: 80%;
}

header h1 {
  font-weight: bold;
  font-size: 36px;
  color: #fce138;
  margin: 0;
  text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);  
}

header a {
  text-decoration: none; /* We used a new property here as well, the text-decoration property. The text-decoration property applies underline, strikethrough, or overline styles to text. By default, the value is none, so we don't usually have to explicitly tell it not to do this. With <a> elements, however, the browser automatically applies a blue color and an underline, and we don't want the links to look like that.  */
  color: #fce138;
}

header nav {  
  margin: 7px 0;
}

header nav ul {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  list-style: none;
}

header nav ul li a {
  padding: 10px 15px;
  font-weight: lighter;
  font-size: 1.55vw; /* changed this later from px to vw duting module 2. Remember that the viewport is the actual browser window size. By setting the value to 1.55vw, we're telling the browser that the font's size should be roughly 1.55% of the window's overall width. This means that if the browser grows or shrinks, that size will change relative to the new overall width. Viewport width is one of a few new methods we can use for flexible length values in CSS, but it can be tricky to nail down compared to absolute units of measurement like pixels. */
  text-shadow: 0 0 10px rgba(0, 0, 0, 0.5); 
}

header nav ul li a:hover {
  background: #fce138;
  color: #024e76;
  border-radius: 15px;
  text-shadow: none;
}

footer {
  background: #fce138;
  width: 100%;
  padding: 40px 35px;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;  
}

footer h2 {  
  color: #024e76;
  font-size: 30px;
  margin: 0;
}

footer div {  
  line-height: 1.5;
  text-align: right;
}

footer a {
  color: #024e76;
}


section {
  padding: 60px;  
}

/* hero style start */
.hero {
    background-image: url("../css/hero-bg.jpg");    
    background-size: cover; /* The background-size property can set the size of the background image to its original size or make it stretched, repeated, or constrained to fit the available space. */
    background-position: center;       
    display: flex;
    justify-content: center;
    flex-wrap: wrap;    
    align-items: flex-start;
    background-attachment: fixed;
    background-position: 80%;
}

.hero-cta {
  width: 35%;
  text-align: right;
  margin: 3.5%;
  color: #fff;
  font-size: 18px;
  line-height: 1.2;
}

.hero-cta h2 {
  font-style: italic;
  font-size: 55px;
  color: #fce138;
  text-shadow: 0 0 10px rgba(0, 0, 0, 0.5); 
}

.hero-form {    
    color: #024e76;
    background-color: rgba(252, 225, 56, 0.8);
    padding: 20px;
    border: solid 3px #024e76;
    width: 40%;
    margin: 3.5%;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); 
    border-radius: 15px;       
}

.hero-form h3 {
    font-size: 24px;
    margin: 0;
}

.hero-form p {
    margin: 5px 0 15px 0;
}

.form-input {
    border: 1px solid #024e76;
    display: block;
    padding: 7px 15px;
    font-size: 16px;
    color: #024e76;
    width: 100%;
    margin-bottom: 15px;
    border-radius: 10px;
    background-color: rgba(255, 255, 255, 0.75);
}

.form-input:focus {
  background-color: rgba(255, 255, 255, 1);
  outline: none;
}

.hero-form label {
    margin: 0 5px;
}

.hero-form button {
    background-color: #024e76;
    color: #fce138;
    padding: 10px 20px;
    border: none;
    font-size: 16px;
    border-radius: 10px;
}

.hero-form button:hover {
  background-color: #39a6b2;
}
/* HERO STYLES END */

/* SECTION TITLE STYLES START */
.section-title {
  font-size: 48px;
  color: #024e76;    
  border-bottom: 3px solid;    
  padding-bottom: 20px;
  text-align: center;
  margin: 0 auto 35px auto;
  width: 50%;
  /*display: inline-block; (REMOVED this later in module 2 to add flexbox properties into this class */ /* We chose to use the inline-block value instead of the inline value so it can have the best of both worlds. It's now an inline element, but things like padding still behave like they would on block elements. Coupled with the text-align property from before, we now have a center-aligned heading with an appropriately sized border, as shown in the following image:
                          The yellow border spans only as wide as the title above it. */  
}

.primary-border {
border-color: #fce138;
}

.secondary-border {
border-color: #39a6b2;
/* SECTION TITLE STYLES END */
}

/* WHAT WE DO STYLES */
.intro p {
  line-height: 1.7;
  color: #39a6b2;
  width: 80%;
  font-size: 20px;
  text-align: center;
  margin: 0 auto; /* Because we shrunk the width of the paragraph down to 80%, it no longer looks centered. Only the text inside is centered. We could use the handy display: inline-block; trick to fix it, but there's another common tactic for centering a block element with a width of less than 100%: margin: 0 auto; */
                  /* This is shorthand for setting a top and bottom margin of zero and a left and right margin of auto. But what does auto mean? Essentially, it tells the browser to calculate the margins for us. When the browser is asked to do this on both sides of an element, it will do its best to make them even, thus pushing the element into the center. */
                  /* Note that this only works for horizontal centering. margin: auto 0 does not vertically center elements. */
}
/* WHAT YOU DO STYLES END */

/* WHAT YOU DO STYLES START */
.steps {    
  background: #fce138;
  /* Something you might have noticed is that the parent text-align: center; property also centered the SVG icons. This can be a bit confusing at first because the property has "text" in its name, and images are not text. The text-align property essentially centers everything inside an element—text or otherwise. However, if you want to use text-align to center an image, make sure you apply it to the image's parent element, not the image itself. */
}

/*.steps div {
  margin-bottom: 80px;
}*/ /* Removed later during module 2 to use advanced CSS using flexbox */

/*.steps img {
  width: 15%;
  margin: 10px 0;
}*/ /* Removed later during module 2 to use advanced CSS using flexbox */

.step {
  margin: 50px auto;
  padding-bottom: 50px;
  border-bottom: 1px solid #39a6b2;
  width: 80%;  
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
}

.step:last-child {
  border-bottom: none;
}

.step h3 {
  color: #024e76;
  font-size: 46px; 
  flex: 1 30%;   
}

.step-info {
  flex: 2 70%;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
}

.step-img {
  flex: 1 12%;
  margin-right: 20px;
}

.step-img img {
  max-width: 100%;
}

.step-text {
  flex: 12;  
}

.step-text p {
  color: #39a6b2;
  font-size: 18px;
}

.step-text h4 {
  font-size: 26px;
  line-height: 1.5;
  color: #024e76;
}
/* WHAT YOU DO STYLES END */

/*.steps span {
  font-size: 38px;
}*/     /* Removed later during module 2 to use advanced CSS using flexbox */

.trainers {
  width: 100%;
  margin: 0 auto;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}

.trainer {  
  margin: 20px;
  background: #024e76;
  color: #fce138;
  flex: 1;
  /* overflow: auto;  The overflow property told the trainer's <article> element that it does in fact have content inside it, and that it needs to look for it and account for those two floated HTML elements' sizes. This is known as providing block formatting context to the element. */
}

.trainer img {
  width: 100%;  
}

.trainer-bio {
  padding: 25px;  
  line-height: 1.3;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

.trainer-bio h3 {
  font-size: 28px;  
}

.trainer-bio h4 {
  font-weight: lighter;
  font-size: 22px;
  margin-bottom: 15px;
}

.trainer-bio p {
  font-size: 17px;  
}

/* reach out style start */
.contact {
  background: #024e76;
  text-align: center;
}

.contact h2 {
  color: #fce138;
}

.contact-info > * {
  flex: 1;
  margin: 15px;
}
/* Here, the * selector is saying "select all elements that are direct children of anything with a class of contact-info." The > symbol means it's looking specifically for direct children of the element listed first. In this case, it's selecting all children of the element with contact-info as its class.

Remember, however, that CSS reads right to left. This means that if the first selector it reads is *, it will try and find every element on the page first, then look at the .contact-info, and then filter out the elements that aren't a direct child of it. This wouldn't be a good approach in a big website, but it won't affect performance for a site this size.

In this case, it will apply the preceding styles to the three flexbox child elements in the contact-info flexbox container, so we're now all set with this section's flexbox layout. */

.contact-info {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}

.contact-info iframe {  
  height: 400px;
}

.contact-info div {  
  color: white;
}

.contact-info h3 {
  color: #fce138;
  font-size: 32px;
}

.contact-info p, 
.contact-info address {
  margin: 20px 0;
  line-height: 1.5;
  font-size: 16px;
  font-style: normal;
}

.contact-info a {
  color: #fce138;
}

.contact-form input,
.contact-form textarea {
  border: 1px solid #024e76;
  display: block;
  padding: 7px 15px;
  font-size: 16px;
  color: #024e76;
  width: 100%;
  margin-bottom: 15px;
  margin-top: 5px;
  border-radius: 10px;
  background-color: rgba(255, 255, 255, 0.75);
}

.contact-form input:focus,
.contact-form textarea:focus {
  background-color: rgba(255, 255, 255, 1);
  outline: none;
}

.contact-form button {
  width: 100%;
  border: none;
  background: #fce138;
  color: #024e76;
  text-align: center;
  padding: 15px 0;
  font-size: 16px;
  border-radius: 10px;
}

.contact-form button:hover {
  color: #fce138;
  background: #39a6b2;
}
/* reach out style end */

.flex-row {
  display: flex;
}

/* The order in which we write the media queries matters. This applies to where they're placed in relation to each other and where they're placed in style.css as a whole. */

/* MEDIA QUERY FOR SMALLER DESKTOP SCREENS AND SMALLER */
@media screen and (max-width: 980px) {
    header {
      padding-bottom: 0;
      justify-content: center;
      position: relative;
    }

    header h1 {
      width: 100%;
      text-align: center;
    }

    header nav ul {
      margin-top: 20px;
      width: 100%;
      justify-content: center;
    }

    header nav ul li a {
      font-size: 20px;
    }

    footer h2, footer div {
      text-align: center;
      width: 100%;
    }

    .hero-cta, .hero-form {
      width: 100%;
    }
    
    .hero-cta {
      text-align: center;
    }

    .section-title {
      width: 80%;
    }
    
    .trainer {
      flex: 0 70%;
    }
    
    .contact-info iframe{
      flex: 1 100%;
    }
}


/* MEDIA QUERY FOR TABLETS AND SMALLER */
@media screen and (max-width: 768px) {
  section {
    padding: 30px 15px;
  }

  .steps h3 {
    flex: 1 100%;
    text-align: center;
  }

  .step-info {
    flex: 2 100%;
    text-align: center;
    justify-content: center;
  }

  .step-img {
    flex: 0 32%;
    margin-right: 0;
    margin-top: 15px;
    margin-bottom: 15px;
  }

  .step-text {
    flex: 100%;
  }
}


/* MEDIA QUERY FOR MOBILE PHONES AND SMALLER */
@media screen and (max-width: 575px) {
  .hero-form button {
    width: 100%;
  }

  .section-title {
    width: 95%;
  }

  .intro p {
    width: 100%;
  }

  .trainer {
    flex: 0 100%;
  }

  .contact-info {
    text-align: center;
  }

  .contact-info > * {
    flex: 0 100%;
  }

  .contact-form {
    order: 3;
  }
}